// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myTopFuncSem_myTopFuncSem,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.876000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=17,HLS_SYN_LUT=589,HLS_VERSION=2020_2}" *)

module myTopFuncSem (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stg,
        d,
        s,
        j,
        ew,
        ew_ap_vld,
        ns,
        ns_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] stg;
input  [31:0] d;
input  [31:0] s;
input  [31:0] j;
output  [31:0] ew;
output   ew_ap_vld;
output  [31:0] ns;
output   ns_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ew_ap_vld;
reg ns_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln2_fu_74_p2;
reg   [0:0] icmp_ln2_reg_692;
wire   [0:0] icmp_ln3_fu_80_p2;
reg   [0:0] icmp_ln3_reg_702;
wire   [0:0] icmp_ln12_fu_86_p2;
reg   [0:0] icmp_ln12_reg_710;
wire   [0:0] icmp_ln16_fu_92_p2;
reg   [0:0] icmp_ln16_reg_719;
wire   [0:0] icmp_ln11_fu_98_p2;
reg   [0:0] icmp_ln11_reg_728;
wire   [0:0] icmp_ln24_fu_104_p2;
reg   [0:0] icmp_ln24_reg_737;
wire   [0:0] and_ln3_fu_110_p2;
reg   [0:0] and_ln3_reg_746;
wire   [0:0] icmp_ln3_1_fu_116_p2;
reg   [0:0] icmp_ln3_1_reg_752;
wire   [0:0] icmp_ln39_fu_122_p2;
reg   [0:0] icmp_ln39_reg_758;
wire   [0:0] icmp_ln13_fu_128_p2;
reg   [0:0] icmp_ln13_reg_763;
wire   [0:0] icmp_ln37_fu_134_p2;
reg   [0:0] icmp_ln37_reg_770;
wire   [0:0] icmp_ln37_1_fu_146_p2;
reg   [0:0] icmp_ln37_1_reg_776;
wire   [0:0] and_ln24_3_fu_164_p2;
reg   [0:0] and_ln24_3_reg_781;
wire   [0:0] icmp_ln57_fu_176_p2;
reg   [0:0] icmp_ln57_reg_787;
wire   [0:0] icmp_ln66_fu_194_p2;
reg   [0:0] icmp_ln66_reg_793;
wire    ap_CS_fsm_state2;
wire   [0:0] or_ln105_fu_615_p2;
wire   [31:0] or_ln37_4_fu_140_p2;
wire   [0:0] icmp_ln24_1_fu_152_p2;
wire   [0:0] icmp_ln24_2_fu_158_p2;
wire   [31:0] or_ln57_fu_170_p2;
wire   [31:0] or_ln66_fu_182_p2;
wire   [31:0] or_ln66_1_fu_188_p2;
wire   [0:0] and_ln24_fu_208_p2;
wire   [0:0] xor_ln27_fu_212_p2;
wire   [0:0] or_ln27_fu_218_p2;
wire   [0:0] or_ln3_fu_223_p2;
wire   [0:0] and_ln3_1_fu_227_p2;
wire   [0:0] or_ln11_fu_204_p2;
wire   [0:0] and_ln12_fu_243_p2;
wire   [0:0] and_ln13_fu_247_p2;
wire   [0:0] xor_ln16_fu_252_p2;
wire   [0:0] or_ln16_fu_258_p2;
wire   [0:0] and_ln38_fu_239_p2;
wire   [0:0] and_ln2_fu_200_p2;
wire   [0:0] xor_ln11_1_fu_286_p2;
wire   [0:0] and_ln13_1_fu_291_p2;
wire   [0:0] and_ln13_2_fu_296_p2;
wire   [0:0] xor_ln11_fu_280_p2;
wire   [0:0] and_ln13_3_fu_305_p2;
wire   [0:0] and_ln27_fu_310_p2;
wire   [0:0] or_ln27_2_fu_321_p2;
wire   [0:0] and_ln24_1_fu_301_p2;
wire   [0:0] or_ln27_3_fu_327_p2;
wire   [0:0] or_ln27_1_fu_315_p2;
wire   [0:0] xor_ln2_fu_274_p2;
wire   [0:0] or_ln27_4_fu_333_p2;
wire   [0:0] tmp471_fu_344_p2;
wire   [0:0] tmp470_fu_339_p2;
wire   [0:0] sel_tmp53_fu_349_p2;
wire   [0:0] not_sel_tmp53_fu_355_p2;
wire   [0:0] and_ln45_fu_269_p2;
wire   [0:0] or_ln45_fu_367_p2;
wire   [0:0] or_ln37_fu_379_p2;
wire   [0:0] xor_ln16_1_fu_390_p2;
wire   [0:0] and_ln37_fu_385_p2;
wire   [0:0] and_ln16_1_fu_395_p2;
wire   [0:0] and_ln37_1_fu_401_p2;
wire   [0:0] or_ln37_2_fu_412_p2;
wire   [0:0] or_ln37_1_fu_406_p2;
wire   [0:0] or_ln37_3_fu_418_p2;
wire   [0:0] xor_ln45_fu_373_p2;
wire   [0:0] sel_tmp92_fu_424_p2;
wire   [0:0] and_ln16_fu_263_p2;
wire   [0:0] sel_tmp54_fu_361_p2;
wire   [0:0] or_ln38_fu_438_p2;
wire   [0:0] xor_ln3_fu_450_p2;
wire   [0:0] or_ln37_5_fu_460_p2;
wire   [0:0] and_ln37_2_fu_465_p2;
wire   [0:0] and_ln3_3_fu_455_p2;
wire   [0:0] or_ln37_6_fu_470_p2;
wire   [0:0] or_ln37_7_fu_475_p2;
wire   [0:0] xor_ln38_fu_444_p2;
wire   [0:0] sel_tmp129_fu_481_p2;
wire   [0:0] and_ln3_2_fu_233_p2;
wire   [0:0] sel_tmp93_fu_430_p3;
wire   [0:0] and_ln24_4_fu_500_p2;
wire   [0:0] and_ln24_2_fu_495_p2;
wire   [0:0] and_ln24_5_fu_504_p2;
wire   [0:0] xor_ln11_2_fu_516_p2;
wire   [0:0] and_ln12_1_fu_521_p2;
wire   [0:0] and_ln13_4_fu_526_p2;
wire   [0:0] and_ln16_2_fu_537_p2;
wire   [0:0] and_ln16_3_fu_541_p2;
wire   [0:0] or_ln12_fu_553_p2;
wire   [0:0] sel_tmp130_fu_487_p3;
wire   [0:0] xor_ln24_fu_510_p2;
wire   [0:0] or_ln12_1_fu_557_p2;
wire   [0:0] xor_ln16_2_fu_547_p2;
wire   [0:0] and_ln12_3_fu_569_p2;
wire   [0:0] xor_ln13_fu_531_p2;
wire   [0:0] and_ln12_4_fu_575_p2;
wire   [0:0] and_ln12_2_fu_563_p2;
wire   [0:0] sel_tmp381_demorgan_fu_587_p2;
wire   [0:0] sel_tmp418_demorgan_fu_593_p2;
wire   [0:0] and_ln12_5_fu_581_p2;
wire   [0:0] or_ln105_2_fu_611_p2;
wire   [0:0] or_ln105_1_fu_605_p2;
wire   [0:0] xor_ln105_fu_621_p2;
wire   [0:0] or_ln105_4_fu_631_p2;
wire   [0:0] or_ln105_3_fu_626_p2;
wire   [0:0] xor_ln105_1_fu_643_p2;
wire   [0:0] or_ln105_5_fu_637_p2;
wire   [0:0] or_ln105_7_fu_655_p2;
wire   [0:0] or_ln105_6_fu_649_p2;
wire   [0:0] select_ln105_fu_661_p3;
wire   [0:0] or_ln2_fu_599_p2;
wire   [0:0] select_ln105_1_fu_674_p3;
wire   [0:0] xor_ln105_2_fu_681_p2;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        and_ln24_3_reg_781 <= and_ln24_3_fu_164_p2;
        and_ln3_reg_746 <= and_ln3_fu_110_p2;
        icmp_ln11_reg_728 <= icmp_ln11_fu_98_p2;
        icmp_ln12_reg_710 <= icmp_ln12_fu_86_p2;
        icmp_ln13_reg_763 <= icmp_ln13_fu_128_p2;
        icmp_ln16_reg_719 <= icmp_ln16_fu_92_p2;
        icmp_ln24_reg_737 <= icmp_ln24_fu_104_p2;
        icmp_ln2_reg_692 <= icmp_ln2_fu_74_p2;
        icmp_ln37_1_reg_776 <= icmp_ln37_1_fu_146_p2;
        icmp_ln37_reg_770 <= icmp_ln37_fu_134_p2;
        icmp_ln39_reg_758 <= icmp_ln39_fu_122_p2;
        icmp_ln3_1_reg_752 <= icmp_ln3_1_fu_116_p2;
        icmp_ln3_reg_702 <= icmp_ln3_fu_80_p2;
        icmp_ln57_reg_787 <= icmp_ln57_fu_176_p2;
        icmp_ln66_reg_793 <= icmp_ln66_fu_194_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln105_fu_615_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ew_ap_vld = 1'b1;
    end else begin
        ew_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln105_fu_615_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ns_ap_vld = 1'b1;
    end else begin
        ns_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln12_1_fu_521_p2 = (xor_ln11_2_fu_516_p2 & icmp_ln12_reg_710);

assign and_ln12_2_fu_563_p2 = (xor_ln24_fu_510_p2 & sel_tmp130_fu_487_p3);

assign and_ln12_3_fu_569_p2 = (xor_ln16_2_fu_547_p2 & or_ln12_1_fu_557_p2);

assign and_ln12_4_fu_575_p2 = (xor_ln13_fu_531_p2 & and_ln12_3_fu_569_p2);

assign and_ln12_5_fu_581_p2 = (and_ln12_4_fu_575_p2 & and_ln12_2_fu_563_p2);

assign and_ln12_fu_243_p2 = (icmp_ln2_reg_692 & icmp_ln12_reg_710);

assign and_ln13_1_fu_291_p2 = (xor_ln11_1_fu_286_p2 & icmp_ln13_reg_763);

assign and_ln13_2_fu_296_p2 = (icmp_ln12_reg_710 & and_ln13_1_fu_291_p2);

assign and_ln13_3_fu_305_p2 = (icmp_ln13_reg_763 & and_ln12_fu_243_p2);

assign and_ln13_4_fu_526_p2 = (and_ln24_3_reg_781 & and_ln12_1_fu_521_p2);

assign and_ln13_fu_247_p2 = (icmp_ln24_reg_737 & and_ln12_fu_243_p2);

assign and_ln16_1_fu_395_p2 = (xor_ln16_1_fu_390_p2 & and_ln13_fu_247_p2);

assign and_ln16_2_fu_537_p2 = (icmp_ln24_reg_737 & icmp_ln16_reg_719);

assign and_ln16_3_fu_541_p2 = (and_ln16_2_fu_537_p2 & and_ln12_1_fu_521_p2);

assign and_ln16_fu_263_p2 = (or_ln16_fu_258_p2 & or_ln11_fu_204_p2);

assign and_ln24_1_fu_301_p2 = (icmp_ln13_reg_763 & and_ln3_reg_746);

assign and_ln24_2_fu_495_p2 = (xor_ln2_fu_274_p2 & icmp_ln11_reg_728);

assign and_ln24_3_fu_164_p2 = (icmp_ln24_2_fu_158_p2 & icmp_ln24_1_fu_152_p2);

assign and_ln24_4_fu_500_p2 = (icmp_ln3_reg_702 & and_ln24_3_reg_781);

assign and_ln24_5_fu_504_p2 = (and_ln24_4_fu_500_p2 & and_ln24_2_fu_495_p2);

assign and_ln24_fu_208_p2 = (icmp_ln24_reg_737 & and_ln3_reg_746);

assign and_ln27_fu_310_p2 = (icmp_ln16_reg_719 & and_ln24_fu_208_p2);

assign and_ln2_fu_200_p2 = (icmp_ln3_reg_702 & icmp_ln2_reg_692);

assign and_ln37_1_fu_401_p2 = (icmp_ln2_reg_692 & and_ln27_fu_310_p2);

assign and_ln37_2_fu_465_p2 = (or_ln37_5_fu_460_p2 & icmp_ln11_reg_728);

assign and_ln37_fu_385_p2 = (or_ln37_fu_379_p2 & icmp_ln2_reg_692);

assign and_ln38_fu_239_p2 = (icmp_ln39_reg_758 & icmp_ln24_reg_737);

assign and_ln3_1_fu_227_p2 = (or_ln3_fu_223_p2 & or_ln27_fu_218_p2);

assign and_ln3_2_fu_233_p2 = (or_ln11_fu_204_p2 & and_ln3_1_fu_227_p2);

assign and_ln3_3_fu_455_p2 = (xor_ln3_fu_450_p2 & icmp_ln11_reg_728);

assign and_ln3_fu_110_p2 = (icmp_ln3_fu_80_p2 & icmp_ln11_fu_98_p2);

assign and_ln45_fu_269_p2 = (icmp_ln12_reg_710 & and_ln38_fu_239_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ew = select_ln105_fu_661_p3;

assign icmp_ln11_fu_98_p2 = ((stg == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_86_p2 = ((d == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_128_p2 = ((s == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_92_p2 = ((j == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_152_p2 = ((s != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_158_p2 = ((s != 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_104_p2 = ((s == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln2_fu_74_p2 = ((stg == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln37_1_fu_146_p2 = ((or_ln37_4_fu_140_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_134_p2 = ((stg != 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_122_p2 = ((j == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln3_1_fu_116_p2 = ((stg != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln3_fu_80_p2 = ((d == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_176_p2 = ((or_ln57_fu_170_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_194_p2 = ((or_ln66_1_fu_188_p2 == 32'd0) ? 1'b1 : 1'b0);

assign not_sel_tmp53_fu_355_p2 = (sel_tmp53_fu_349_p2 ^ 1'd1);

assign ns = xor_ln105_2_fu_681_p2;

assign or_ln105_1_fu_605_p2 = (and_ln2_fu_200_p2 | and_ln12_5_fu_581_p2);

assign or_ln105_2_fu_611_p2 = (icmp_ln66_reg_793 | icmp_ln57_reg_787);

assign or_ln105_3_fu_626_p2 = (xor_ln105_fu_621_p2 | icmp_ln66_reg_793);

assign or_ln105_4_fu_631_p2 = (or_ln105_2_fu_611_p2 | and_ln2_fu_200_p2);

assign or_ln105_5_fu_637_p2 = (sel_tmp92_fu_424_p2 | sel_tmp129_fu_481_p2);

assign or_ln105_6_fu_649_p2 = (xor_ln105_1_fu_643_p2 | or_ln105_3_fu_626_p2);

assign or_ln105_7_fu_655_p2 = (or_ln105_5_fu_637_p2 | or_ln105_4_fu_631_p2);

assign or_ln105_fu_615_p2 = (or_ln105_2_fu_611_p2 | or_ln105_1_fu_605_p2);

assign or_ln11_fu_204_p2 = (icmp_ln2_reg_692 | icmp_ln11_reg_728);

assign or_ln12_1_fu_557_p2 = (or_ln12_fu_553_p2 | and_ln2_fu_200_p2);

assign or_ln12_fu_553_p2 = (icmp_ln37_reg_770 | icmp_ln12_reg_710);

assign or_ln16_fu_258_p2 = (xor_ln16_fu_252_p2 | icmp_ln16_reg_719);

assign or_ln27_1_fu_315_p2 = (xor_ln11_fu_280_p2 | and_ln13_2_fu_296_p2);

assign or_ln27_2_fu_321_p2 = (and_ln27_fu_310_p2 | and_ln13_3_fu_305_p2);

assign or_ln27_3_fu_327_p2 = (or_ln27_2_fu_321_p2 | and_ln24_1_fu_301_p2);

assign or_ln27_4_fu_333_p2 = (or_ln27_3_fu_327_p2 | or_ln27_1_fu_315_p2);

assign or_ln27_fu_218_p2 = (xor_ln27_fu_212_p2 | icmp_ln16_reg_719);

assign or_ln2_fu_599_p2 = (sel_tmp418_demorgan_fu_593_p2 | and_ln2_fu_200_p2);

assign or_ln37_1_fu_406_p2 = (and_ln37_fu_385_p2 | and_ln16_1_fu_395_p2);

assign or_ln37_2_fu_412_p2 = (and_ln37_1_fu_401_p2 | and_ln13_3_fu_305_p2);

assign or_ln37_3_fu_418_p2 = (or_ln37_2_fu_412_p2 | or_ln37_1_fu_406_p2);

assign or_ln37_4_fu_140_p2 = (stg | s);

assign or_ln37_5_fu_460_p2 = (icmp_ln24_reg_737 | and_ln13_3_fu_305_p2);

assign or_ln37_6_fu_470_p2 = (icmp_ln37_1_reg_776 | and_ln37_2_fu_465_p2);

assign or_ln37_7_fu_475_p2 = (or_ln37_6_fu_470_p2 | and_ln3_3_fu_455_p2);

assign or_ln37_fu_379_p2 = (or_ln27_1_fu_315_p2 | and_ln24_1_fu_301_p2);

assign or_ln38_fu_438_p2 = (and_ln38_fu_239_p2 | and_ln2_fu_200_p2);

assign or_ln3_fu_223_p2 = (icmp_ln3_reg_702 | icmp_ln3_1_reg_752);

assign or_ln45_fu_367_p2 = (and_ln45_fu_269_p2 | and_ln2_fu_200_p2);

assign or_ln57_fu_170_p2 = (stg | d);

assign or_ln66_1_fu_188_p2 = (or_ln66_fu_182_p2 | or_ln57_fu_170_p2);

assign or_ln66_fu_182_p2 = (s | j);

assign sel_tmp129_fu_481_p2 = (xor_ln38_fu_444_p2 & or_ln37_7_fu_475_p2);

assign sel_tmp130_fu_487_p3 = ((sel_tmp129_fu_481_p2[0:0] == 1'b1) ? and_ln3_2_fu_233_p2 : sel_tmp93_fu_430_p3);

assign sel_tmp381_demorgan_fu_587_p2 = (sel_tmp92_fu_424_p2 | sel_tmp53_fu_349_p2);

assign sel_tmp418_demorgan_fu_593_p2 = (sel_tmp381_demorgan_fu_587_p2 | sel_tmp129_fu_481_p2);

assign sel_tmp53_fu_349_p2 = (tmp471_fu_344_p2 & tmp470_fu_339_p2);

assign sel_tmp54_fu_361_p2 = (or_ln11_fu_204_p2 | not_sel_tmp53_fu_355_p2);

assign sel_tmp92_fu_424_p2 = (xor_ln45_fu_373_p2 & or_ln37_3_fu_418_p2);

assign sel_tmp93_fu_430_p3 = ((sel_tmp92_fu_424_p2[0:0] == 1'b1) ? and_ln16_fu_263_p2 : sel_tmp54_fu_361_p2);

assign select_ln105_1_fu_674_p3 = ((or_ln105_2_fu_611_p2[0:0] == 1'b1) ? icmp_ln66_reg_793 : or_ln2_fu_599_p2);

assign select_ln105_fu_661_p3 = ((or_ln105_7_fu_655_p2[0:0] == 1'b1) ? or_ln105_6_fu_649_p2 : sel_tmp53_fu_349_p2);

assign tmp470_fu_339_p2 = (xor_ln2_fu_274_p2 & icmp_ln37_reg_770);

assign tmp471_fu_344_p2 = (or_ln27_4_fu_333_p2 & icmp_ln3_1_reg_752);

assign xor_ln105_1_fu_643_p2 = (or_ln105_4_fu_631_p2 ^ 1'd1);

assign xor_ln105_2_fu_681_p2 = (select_ln105_1_fu_674_p3 ^ 1'd1);

assign xor_ln105_fu_621_p2 = (icmp_ln57_reg_787 ^ 1'd1);

assign xor_ln11_1_fu_286_p2 = (icmp_ln11_reg_728 ^ 1'd1);

assign xor_ln11_2_fu_516_p2 = (icmp_ln2_reg_692 ^ and_ln2_fu_200_p2);

assign xor_ln11_fu_280_p2 = (or_ln11_fu_204_p2 ^ 1'd1);

assign xor_ln13_fu_531_p2 = (1'd1 ^ and_ln13_4_fu_526_p2);

assign xor_ln16_1_fu_390_p2 = (icmp_ln16_reg_719 ^ 1'd1);

assign xor_ln16_2_fu_547_p2 = (1'd1 ^ and_ln16_3_fu_541_p2);

assign xor_ln16_fu_252_p2 = (1'd1 ^ and_ln13_fu_247_p2);

assign xor_ln24_fu_510_p2 = (1'd1 ^ and_ln24_5_fu_504_p2);

assign xor_ln27_fu_212_p2 = (1'd1 ^ and_ln24_fu_208_p2);

assign xor_ln2_fu_274_p2 = (1'd1 ^ and_ln2_fu_200_p2);

assign xor_ln38_fu_444_p2 = (or_ln38_fu_438_p2 ^ 1'd1);

assign xor_ln3_fu_450_p2 = (icmp_ln3_reg_702 ^ 1'd1);

assign xor_ln45_fu_373_p2 = (or_ln45_fu_367_p2 ^ 1'd1);

endmodule //myTopFuncSem
